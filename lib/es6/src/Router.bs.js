// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Belt_List from "bs-platform/lib/es6/belt_List.js";
import * as ReasonReactRouter from "reason-react/lib/es6/src/ReasonReactRouter.bs.js";
import * as Home$ReasonCarousel from "./Home.bs.js";
import * as Page1$ReasonCarousel from "./Page1.bs.js";
import * as Page2$ReasonCarousel from "./Page2.bs.js";
import * as Page3$ReasonCarousel from "./Page3.bs.js";

var routes_0 = {
  href: "/",
  title: "Home",
  component: React.createElement(Home$ReasonCarousel.make, {})
};

var routes_1 = {
  hd: {
    href: "/page1",
    title: "Page1",
    component: React.createElement(Page1$ReasonCarousel.make, {})
  },
  tl: {
    hd: {
      href: "/page2",
      title: "Page2",
      component: React.createElement(Page2$ReasonCarousel.make, {})
    },
    tl: {
      hd: {
        href: "/page3",
        title: "Page3",
        component: React.createElement(Page3$ReasonCarousel.make, {})
      },
      tl: /* [] */0
    }
  }
};

var routes = {
  hd: routes_0,
  tl: routes_1
};

function hrefToPath(href) {
  return Belt_List.fromArray(href.replace(/(^\/)|(\/$)/, "").split("/"));
}

function urlToRoute(url) {
  var route = Belt_List.getBy(routes, (function (route) {
          return Caml_obj.caml_equal(url.path, hrefToPath(route.href));
        }));
  if (route !== undefined) {
    return route;
  } else {
    return Belt_List.headExn(routes);
  }
}

function Router$WithRouter(Props) {
  var children = Props.children;
  var url = ReasonReactRouter.useUrl(undefined, undefined);
  return Curry._1(children, urlToRoute(url));
}

var WithRouter = {
  make: Router$WithRouter
};

function Router$Link(Props) {
  var href = Props.href;
  var classNameOpt = Props.className;
  var children = Props.children;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  return React.createElement("a", {
              className: className,
              href: href,
              onClick: (function ($$event) {
                  $$event.preventDefault();
                  return ReasonReactRouter.push(href);
                })
            }, children);
}

var Link = {
  make: Router$Link
};

function Router$NavLink(Props) {
  var href = Props.href;
  var children = Props.children;
  return React.createElement(Router$WithRouter, {
              children: (function (currentRoute) {
                  return React.createElement(Router$Link, {
                              href: href,
                              className: currentRoute.href === href ? "active" : "",
                              children: children
                            });
                })
            });
}

var NavLink = {
  make: Router$NavLink
};

export {
  routes ,
  hrefToPath ,
  urlToRoute ,
  WithRouter ,
  Link ,
  NavLink ,
  
}
/* routes Not a pure module */
