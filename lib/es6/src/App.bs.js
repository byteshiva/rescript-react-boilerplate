// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Router$ReasonCarousel from "./Router.bs.js";
import * as ReactTransitionGroup from "react-transition-group";

import styled, { css } from "styled-components"
;

var wrapper = (
      styled.div`
        min-height: 100vh;

        &:after {
          content: "";
          transition: opacity 450ms cubic-bezier(0.23, 1, 0.32, 1),
            transform 0ms cubic-bezier(0.23, 1, 0.32, 1) 450ms;
          position: fixed;
          top: 0;
          right: 0;
          bottom: 0;
          left: 0;
          background-color: rgba(0, 0, 0, 0.33);
          transform: translateX(-100%);
          opacity: 0;
          z-index: 1;

          ${props => props.isOpen && css`
            transition: opacity 450ms cubic-bezier(0.23, 1, 0.32, 1);
            transform: translateX(0%);
            opacity: 1;
          `}
        }

        /* ReactTransitionGroup */
        @keyframes enter {
          from {
            opacity: 0;
            transform: translateY(50px);
          }
        }

        @keyframes exit {
          to {
            opacity: 0;
            transform: translateY(50px);
          }
        }

        .routeTransition-enter.routeTransition-enter-active {
          animation: enter 500ms ease 400ms both;
        }

        .routeTransition-exit.routeTransition-exit-active {
          animation: exit 400ms ease both;
        }
      `
    );

function App$Wrapper(Props) {
  var isOpen = Props.isOpen;
  var onClick = Props.onClick;
  var onTouchStart = Props.onTouchStart;
  var onTouchMove = Props.onTouchMove;
  var onTouchEnd = Props.onTouchEnd;
  var children = Props.children;
  return React.createElement(wrapper, {
              isOpen: isOpen,
              onClick: onClick,
              onTouchStart: onTouchStart,
              onTouchMove: onTouchMove,
              onTouchEnd: onTouchEnd,
              children: children
            });
}

var Wrapper = /* module */[
  /* wrapper */wrapper,
  /* make */App$Wrapper
];

var header = (
      styled.header`
        display: flex;
        align-items: center;
        height: 60px;
        background-color: dodgerblue;
        color: white;
        box-shadow: 0 4px 5px 0 rgba(15, 74, 133, 0.14),
          0 2px 9px 1px rgba(15, 74, 133, 0.12),
          0 4px 2px -2px rgba(15, 74, 133, 0.2);

        > a {
          display: flex;
          align-items: center;
          width: 32px;
          height: 100%;
          padding: 0 10px;
          cursor: pointer;

          > img {
            width: 100%;
            height: 100%;
          }
        }

        > h1 {
          font-size: 26px;
          line-height: 26px;
          margin-left: 10px;
        }
      `
    );

function App$Header(Props) {
  var children = Props.children;
  return React.createElement(header, {
              children: children
            });
}

var Header = /* module */[
  /* header */header,
  /* make */App$Header
];

var nav = (
      styled.nav`
        transition: transform 450ms cubic-bezier(0.23, 1, 0.32, 1);
        position: absolute;
        top: 0;
        left: 0;
        transform: translateX(calc(-100% - 10px));
        height: 100vh;
        background-color: white;
        box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 10px,
          rgba(0, 0, 0, 0.23) 0px 3px 10px;
        overflow: auto;
        z-index: 2;

        ${props => props.isOpen && css`
          transform: translateX(0%);
        `}

        > header {
          position: relative;
          background-color: lavender;
          height: 150px;
          margin: 0;

          > a {
            font-size: 24px;
            line-height: 24px;
            position: absolute;
            top: 0;
            left: 0;
            display: flex;
            align-items: center;
            height: 40px;
            padding: 10px 20px;

            > img {
              width: 20px;
              height: 20px;
              margin-right: 20px;
            }
          }
        }

        > label {
          font-weight: normal;
          font-size: 12px;
          line-height: 24px;
          text-transform: uppercase;
          display: block;
          background-color: rgba(0, 0, 0, 0.32);
          color: white;
          padding: 0 15px;
        }

        > ul {
          margin: 0;
          padding: 0;
          list-style: none;

          > li {
            position: relative;
            border-bottom: 1px solid rgba(0, 0, 0, 0.06);

            &:after {
              content: url(${require("../../../src/img/icon/chevron.svg")});
              position: absolute;
              top: 0;
              right: 15px;
              bottom: 0;
              margin: auto;
              width: 15px;
              height: 15px;
            }

            > a {
              transition: background-color 450ms cubic-bezier(0.23, 1, 0.32, 1);
              font-size: 18px;
              line-height: 54px;
              text-decoration: none;
              display: block;
              padding: 0 15px;
              color: black;

              &.active {
                background-color: #e9e9e9;
              }
            }

            > img {
              width: 15px;
              height: 15px;
            }
          }
        }

        @media only screen and (max-width: 767px) {
          width: 85vw;
        }

        @media only screen and (min-width: 768px) {
          width: 300px;
        }
      `
    );

var make = React.forwardRef((function (Props, ref) {
        var isOpen = Props.isOpen;
        var onClick = Props.onClick;
        var style = Props.style;
        var children = Props.children;
        return React.createElement(nav, {
                    isOpen: isOpen,
                    onClick: onClick,
                    style: style,
                    children: children,
                    ref: ref
                  });
      }));

var Nav = /* module */[
  /* nav */nav,
  /* make */make
];

function App(Props) {
  var currentRoute = Props.currentRoute;
  var navRef = React.useRef(null);
  var match = navRef.current;
  var width = (match == null) ? 0.0 : match.clientWidth;
  var match$1 = React.useReducer((function (state, action) {
          if (typeof action === "number") {
            if (state[/* isOpen */0]) {
              var match = Belt_Option.getWithDefault(state[/* touches */1][/* first */0], /* tuple */[
                    0.0,
                    0.0
                  ]);
              var match$1 = Belt_Option.getWithDefault(state[/* touches */1][/* last */1], /* tuple */[
                    0.0,
                    0.0
                  ]);
              var x$prime = match$1[0];
              var velocity = (x$prime - match[0]) / (match$1[1] - match[1]);
              var state_000 = /* isOpen */state[/* isOpen */0];
              var state_001 = /* touches : record */[
                /* first */undefined,
                /* last */undefined
              ];
              var state$1 = /* record */[
                state_000,
                state_001
              ];
              if (velocity < -0.3 || x$prime < width / 2.0) {
                return /* record */[
                        /* isOpen */false,
                        /* touches : record */[
                          /* first */undefined,
                          /* last */undefined
                        ]
                      ];
              } else {
                return state$1;
              }
            } else {
              return state;
            }
          } else {
            switch (action.tag | 0) {
              case 0 : 
                  return /* record */[
                          /* isOpen */action[0],
                          /* touches */state[/* touches */1]
                        ];
              case 1 : 
                  if (state[/* isOpen */0]) {
                    return /* record */[
                            /* isOpen */state[/* isOpen */0],
                            /* touches : record */[
                              /* first *//* tuple */[
                                action[0],
                                performance.now()
                              ],
                              /* last */undefined
                            ]
                          ];
                  } else {
                    return state;
                  }
              case 2 : 
                  if (state[/* isOpen */0]) {
                    var init = state[/* touches */1];
                    return /* record */[
                            /* isOpen */state[/* isOpen */0],
                            /* touches : record */[
                              /* first */init[/* first */0],
                              /* last *//* tuple */[
                                action[0],
                                performance.now()
                              ]
                            ]
                          ];
                  } else {
                    return state;
                  }
              
            }
          }
        }), /* record */[
        /* isOpen */false,
        /* touches : record */[
          /* first */undefined,
          /* last */undefined
        ]
      ]);
  var dispatch = match$1[1];
  var state = match$1[0];
  React.useEffect((function () {
          var handler = function (param) {
            return Curry._1(dispatch, /* ToggleMenu */Block.__(0, [false]));
          };
          addEventListener("popstate", handler);
          return (function (param) {
                    removeEventListener("popstate", handler);
                    return /* () */0;
                  });
        }));
  var match$2 = state[/* touches */1];
  var match$3 = match$2[/* first */0];
  var tmp;
  var exit = 0;
  if (match$3 !== undefined) {
    var match$4 = match$2[/* last */1];
    if (match$4 !== undefined) {
      var x$prime = match$4[0];
      var x = match$3[0];
      var match$5 = x$prime - x > 0.0;
      tmp = {
        transition: "none",
        transform: "translateX(" + ((
              match$5 ? 0.0 : x$prime - x
            ).toString() + "0px)")
      };
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    tmp = { };
  }
  return React.createElement(App$Wrapper, {
              isOpen: state[/* isOpen */0],
              onClick: (function (_event) {
                  if (state[/* isOpen */0]) {
                    return Curry._1(dispatch, /* ToggleMenu */Block.__(0, [false]));
                  } else {
                    return 0;
                  }
                }),
              onTouchStart: (function ($$event) {
                  return Curry._1(dispatch, /* TouchStart */Block.__(1, [$$event.changedTouches.item(0).clientX]));
                }),
              onTouchMove: (function ($$event) {
                  return Curry._1(dispatch, /* TouchMove */Block.__(2, [$$event.changedTouches.item(0).clientX]));
                }),
              onTouchEnd: (function (_event) {
                  return Curry._1(dispatch, /* TouchEnd */0);
                }),
              children: null
            }, React.createElement(App$Header, {
                  children: null
                }, React.createElement("a", {
                      onClick: (function ($$event) {
                          $$event.stopPropagation();
                          return Curry._1(dispatch, /* ToggleMenu */Block.__(0, [true]));
                        })
                    }, React.createElement("img", {
                          src: (require("../../../src/img/icon/hamburger.svg"))
                        })), React.createElement("h1", undefined, currentRoute[/* title */1])), React.createElement(make, {
                  isOpen: state[/* isOpen */0],
                  onClick: (function ($$event) {
                      $$event.stopPropagation();
                      return /* () */0;
                    }),
                  style: tmp,
                  children: null,
                  ref: navRef
                }, React.createElement("header", undefined, React.createElement("a", {
                          onClick: (function (_event) {
                              return Curry._1(dispatch, /* ToggleMenu */Block.__(0, [false]));
                            })
                        }, React.createElement("img", {
                              src: (require("../../../src/img/icon/arrow.svg"))
                            }), currentRoute[/* title */1])), React.createElement("label", undefined, "home"), React.createElement("ul", undefined, React.createElement("li", undefined, React.createElement(Router$ReasonCarousel.NavLink[/* make */0], {
                              href: "/",
                              children: "Home"
                            }))), React.createElement("label", undefined, "pages"), React.createElement("ul", undefined, React.createElement("li", undefined, React.createElement(Router$ReasonCarousel.NavLink[/* make */0], {
                              href: "/page1",
                              children: "Page1"
                            })), React.createElement("li", undefined, React.createElement(Router$ReasonCarousel.NavLink[/* make */0], {
                              href: "/page2",
                              children: "Page2"
                            })), React.createElement("li", undefined, React.createElement(Router$ReasonCarousel.NavLink[/* make */0], {
                              href: "/page3",
                              children: "Page3"
                            })))), React.createElement("main", undefined, React.createElement(ReactTransitionGroup.TransitionGroup, {
                      children: React.createElement(ReactTransitionGroup.CSSTransition, {
                            in: true,
                            timeout: 900,
                            classNames: "routeTransition",
                            children: currentRoute[/* component */2],
                            key: currentRoute[/* title */1]
                          })
                    })));
}

var make$1 = App;

export {
  Wrapper ,
  Header ,
  Nav ,
  make$1 as make,
  
}
/*  Not a pure module */
