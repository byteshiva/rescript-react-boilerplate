// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Nav$ReasonCarousel from "./Nav.bs.js";
import * as Header$ReasonCarousel from "./Header.bs.js";
import * as Router$ReasonCarousel from "./Router.bs.js";
import * as Wrapper$ReasonCarousel from "./Wrapper.bs.js";
import * as ReactTransitionGroup from "react-transition-group";

function App(Props) {
  var currentRoute = Props.currentRoute;
  var navRef = React.useRef(null);
  var nav = navRef.current;
  var width = (nav == null) ? 0.0 : nav.clientWidth;
  var match = React.useReducer((function (state, action) {
          if (typeof action === "number") {
            if (!state.isOpen) {
              return state;
            }
            var match = Belt_Option.getWithDefault(state.touches.first, [
                  0.0,
                  0.0
                ]);
            var match$1 = Belt_Option.getWithDefault(state.touches.last, [
                  0.0,
                  0.0
                ]);
            var x$p = match$1[0];
            var velocity = (x$p - match[0]) / (match$1[1] - match[1]);
            var state_isOpen = state.isOpen;
            var state_touches = {
              first: undefined,
              last: undefined
            };
            var state$1 = {
              isOpen: state_isOpen,
              touches: state_touches
            };
            if (velocity < -0.3 || x$p < width / 2.0) {
              return {
                      isOpen: false,
                      touches: {
                        first: undefined,
                        last: undefined
                      }
                    };
            } else {
              return state$1;
            }
          }
          switch (action.TAG | 0) {
            case /* ToggleMenu */0 :
                return {
                        isOpen: action._0,
                        touches: state.touches
                      };
            case /* TouchStart */1 :
                if (state.isOpen) {
                  return {
                          isOpen: state.isOpen,
                          touches: {
                            first: [
                              action._0,
                              performance.now()
                            ],
                            last: undefined
                          }
                        };
                } else {
                  return state;
                }
            case /* TouchMove */2 :
                if (!state.isOpen) {
                  return state;
                }
                var init = state.touches;
                return {
                        isOpen: state.isOpen,
                        touches: {
                          first: init.first,
                          last: [
                            action._0,
                            performance.now()
                          ]
                        }
                      };
            
          }
        }), {
        isOpen: false,
        touches: {
          first: undefined,
          last: undefined
        }
      });
  var dispatch = match[1];
  var state = match[0];
  React.useEffect(function () {
        var handler = function (param) {
          return Curry._1(dispatch, {
                      TAG: /* ToggleMenu */0,
                      _0: false
                    });
        };
        addEventListener("popstate", handler);
        return (function (param) {
                  removeEventListener("popstate", handler);
                  
                });
      });
  var match$1 = state.touches;
  var match$2 = match$1.first;
  var tmp;
  var exit = 0;
  if (match$2 !== undefined) {
    var match$3 = match$1.last;
    if (match$3 !== undefined) {
      var x$p = match$3[0];
      var x = match$2[0];
      tmp = {
        transition: "none",
        transform: "translateX(" + ((
              x$p - x > 0.0 ? 0.0 : x$p - x
            ).toString() + "0px)")
      };
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    tmp = {};
  }
  return React.createElement(Wrapper$ReasonCarousel.sc, {
              isOpen: state.isOpen,
              onClick: (function (_event) {
                  if (state.isOpen) {
                    return Curry._1(dispatch, {
                                TAG: /* ToggleMenu */0,
                                _0: false
                              });
                  }
                  
                }),
              onTouchStart: (function ($$event) {
                  return Curry._1(dispatch, {
                              TAG: /* TouchStart */1,
                              _0: Curry._1($$event.changedTouches.item, 0).clientX
                            });
                }),
              onTouchMove: (function ($$event) {
                  return Curry._1(dispatch, {
                              TAG: /* TouchMove */2,
                              _0: Curry._1($$event.changedTouches.item, 0).clientX
                            });
                }),
              onTouchEnd: (function (_event) {
                  return Curry._1(dispatch, /* TouchEnd */0);
                }),
              children: null
            }, React.createElement(Header$ReasonCarousel.sc, {
                  children: null
                }, React.createElement("a", {
                      onClick: (function ($$event) {
                          $$event.stopPropagation();
                          return Curry._1(dispatch, {
                                      TAG: /* ToggleMenu */0,
                                      _0: true
                                    });
                        })
                    }, React.createElement("img", {
                          src: (require("../../../src/img/icon/hamburger.svg"))
                        })), React.createElement("h1", undefined, currentRoute.title)), React.createElement(Nav$ReasonCarousel.sc, {
                  isOpen: state.isOpen,
                  onClick: (function ($$event) {
                      $$event.stopPropagation();
                      
                    }),
                  style: tmp,
                  ref: navRef,
                  children: null
                }, React.createElement("header", undefined, React.createElement("a", {
                          onClick: (function (_event) {
                              return Curry._1(dispatch, {
                                          TAG: /* ToggleMenu */0,
                                          _0: false
                                        });
                            })
                        }, React.createElement("img", {
                              src: (require("../../../src/img/icon/arrow.svg"))
                            }), currentRoute.title)), React.createElement("label", undefined, "home"), React.createElement("ul", undefined, React.createElement("li", undefined, React.createElement(Router$ReasonCarousel.NavLink.make, {
                              href: "/",
                              children: "Home"
                            }))), React.createElement("label", undefined, "pages"), React.createElement("ul", undefined, React.createElement("li", undefined, React.createElement(Router$ReasonCarousel.NavLink.make, {
                              href: "/page1",
                              children: "Page1"
                            })), React.createElement("li", undefined, React.createElement(Router$ReasonCarousel.NavLink.make, {
                              href: "/page2",
                              children: "Page2"
                            })), React.createElement("li", undefined, React.createElement(Router$ReasonCarousel.NavLink.make, {
                              href: "/page3",
                              children: "Page3"
                            })))), React.createElement("main", undefined, React.createElement(ReactTransitionGroup.TransitionGroup, {
                      children: React.createElement(ReactTransitionGroup.CSSTransition, {
                            in: true,
                            timeout: 900,
                            classNames: "routeTransition",
                            children: currentRoute.component,
                            key: currentRoute.title
                          })
                    })));
}

var make = App;

export {
  make ,
  
}
/* react Not a pure module */
